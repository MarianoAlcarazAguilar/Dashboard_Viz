theme(legend.position = "top")
# Crear la gráfica de barras apiladas
ggplot(data, aes(x = year, y = porcentaje, fill = team)) +
geom_bar(stat = "identity", width = 1) +
scale_fill_manual(values = c("Red Bull"="#3671C6","Mercedes"="#6CD3BF","Aston Martin"="#358C75","Ferrari"="#F91536","Williams"="#37BEDD",
"Alpine"="#2293D1","Haas"="#B6BABD","AlphaTauri"="#5E8FAA","McLaren"="#F58020","Alfa Romeo"="#C92D4B")) +
labs(x = "", y = "Valor", fill = "Grupo") +
theme_minimal() +
theme(legend.position = "top")
# Crear la gráfica de barras apiladas
ggplot(data, aes(x = year, y = porcentaje, fill = team)) +
geom_bar(stat = "identity", width = 0.95) +
scale_fill_manual(values = c("Red Bull"="#3671C6","Mercedes"="#6CD3BF","Aston Martin"="#358C75","Ferrari"="#F91536","Williams"="#37BEDD",
"Alpine"="#2293D1","Haas"="#B6BABD","AlphaTauri"="#5E8FAA","McLaren"="#F58020","Alfa Romeo"="#C92D4B")) +
labs(x = "", y = "Valor", fill = "Grupo") +
theme_minimal() +
theme(legend.position = "top")
# Crear la gráfica de barras apiladas
ggplot(data, aes(x = year, y = porcentaje, fill = team)) +
geom_bar(stat = "identity", width = 0.99) +
scale_fill_manual(values = c("Red Bull"="#3671C6","Mercedes"="#6CD3BF","Aston Martin"="#358C75","Ferrari"="#F91536","Williams"="#37BEDD",
"Alpine"="#2293D1","Haas"="#B6BABD","AlphaTauri"="#5E8FAA","McLaren"="#F58020","Alfa Romeo"="#C92D4B")) +
labs(x = "", y = "Valor", fill = "Grupo") +
theme_minimal() +
theme(legend.position = "top")
# Crear la gráfica de barras apiladas
ggplot(data, aes(x = year, y = porcentaje, fill = team)) +
geom_bar(stat = "identity", width = 0.98) +
scale_fill_manual(values = c("Red Bull"="#3671C6","Mercedes"="#6CD3BF","Aston Martin"="#358C75","Ferrari"="#F91536","Williams"="#37BEDD",
"Alpine"="#2293D1","Haas"="#B6BABD","AlphaTauri"="#5E8FAA","McLaren"="#F58020","Alfa Romeo"="#C92D4B")) +
labs(x = "", y = "Valor", fill = "Grupo") +
theme_minimal() +
theme(legend.position = "top")
# Crear la gráfica de barras apiladas
ggplot(data, aes(x = year, y = porcentaje, fill = team)) +
geom_bar(stat = "identity", width = 0.97) +
scale_fill_manual(values = c("Red Bull"="#3671C6","Mercedes"="#6CD3BF","Aston Martin"="#358C75","Ferrari"="#F91536","Williams"="#37BEDD",
"Alpine"="#2293D1","Haas"="#B6BABD","AlphaTauri"="#5E8FAA","McLaren"="#F58020","Alfa Romeo"="#C92D4B")) +
labs(x = "", y = "Valor", fill = "Grupo") +
theme_minimal() +
theme(legend.position = "top")
# Crear la gráfica de barras apiladas
ggplot(data, aes(x = year, y = porcentaje, fill = team)) +
geom_bar(stat = "identity", width = 0.95) +
scale_fill_manual(values = c("Red Bull"="#3671C6","Mercedes"="#6CD3BF","Aston Martin"="#358C75","Ferrari"="#F91536","Williams"="#37BEDD",
"Alpine"="#2293D1","Haas"="#B6BABD","AlphaTauri"="#5E8FAA","McLaren"="#F58020","Alfa Romeo"="#C92D4B")) +
labs(x = "", y = "Valor", fill = "Grupo") +
theme_minimal() +
theme(legend.position = "top")
# Crear la gráfica de barras apiladas
ggplot(data, aes(x = year, y = puntos, fill = team)) +
geom_bar(stat = "identity", width = 0.95) +
scale_fill_manual(values = c("Red Bull"="#3671C6","Mercedes"="#6CD3BF","Aston Martin"="#358C75","Ferrari"="#F91536","Williams"="#37BEDD",
"Alpine"="#2293D1","Haas"="#B6BABD","AlphaTauri"="#5E8FAA","McLaren"="#F58020","Alfa Romeo"="#C92D4B")) +
labs(x = "", y = "Valor", fill = "Grupo") +
theme_minimal() +
theme(legend.position = "top")
# Crear la gráfica de barras apiladas
ggplot(data, aes(x = year, y = porcentaje, fill = team)) +
geom_bar(stat = "identity", width = 0.95) +
scale_fill_manual(values = c("Red Bull"="#3671C6","Mercedes"="#6CD3BF","Aston Martin"="#358C75","Ferrari"="#F91536","Williams"="#37BEDD",
"Alpine"="#2293D1","Haas"="#B6BABD","AlphaTauri"="#5E8FAA","McLaren"="#F58020","Alfa Romeo"="#C92D4B")) +
labs(x = "", y = "Valor", fill = "Grupo") +
theme_minimal() +
theme(legend.position = "top")
setwd("/Users/mariano/Documents/itam/visualizacion/Dashboard_viz")
library(ggplot2)
library(ggstream)
data <- read.csv("datos/data_for_streamgraph.csv")
# Crear el streamgraph
ggplot(data, aes(x = year, y = porcentaje, fill = team)) +
geom_stream(alpha = 1, size = 0, color = "black") +
scale_fill_manual(values = c("Red Bull"="#3671C6","Mercedes"="#6CD3BF","Aston Martin"="#358C75","Ferrari"="#F91536","Williams"="#37BEDD",
"Alpine"="#2293D1","Haas"="#B6BABD","AlphaTauri"="#5E8FAA","McLaren"="#F58020","Alfa Romeo"="#C92D4B")) +
labs(x = "", y = "Puntos", fill = "Equipo") +
theme_minimal() +
theme(legend.position = "top")
setwd("/Users/mariano/Documents/itam/visualizacion/Dashboard_viz")
library(leaflet)
library(dplyr)
library(sf)
# Lectura de los datos necesarios
circuits <- read.csv('./datos/circuits.csv')
circuits
View(circuits)
leaflet() %>%
addTiles()
leaflet()#  %>%
? addCircleMarkers
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = circuits,
lng = "lng",
lat = "lat",
radius = "alt"
)
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = circuits,
lng = lng,
lat = lat,
radius = alt
)
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = circuits,
lng = circuits$lng,
lat = circuits$lat,
radius = circuits$alt
)
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = circuits,
lng = circuits$lng,
lat = circuits$lat
#radius = circuits$alt
)
# Eliminamos los valores negativos para poder tomar logaritmo
circuits$alt_trans <- ifelse(circuits$alt < 0, 1, circuits$alt + 1)
# Eliminamos los valores negativos para poder tomar logaritmo
circuits$alt_trans <- ifelse(circuits$alt < 0, 1, circuits$alt)
circuits$alt_trans <- log(circuits$alt_trans)
# Lectura de los datos necesarios
circuits <- read.csv('./datos/circuits.csv')
# Eliminamos los valores negativos para poder tomar logaritmo
circuits$alt_trans <- ifelse(circuits$alt < 0, 1, circuits$alt)
# Eliminamos los valores negativos para poder tomar logaritmo
circuits$alt_trans <- ifelse(circuits$alt < 0, 1, circuits$alt + 1)
# Lectura de los datos necesarios
circuits <- read.csv('./datos/circuits.csv')
View(circuits)
# Lectura de los datos necesarios
circuits <- read.csv('./datos/circuits.csv')
View(circuits)
# Eliminamos los valores negativos para poder tomar logaritmo
circuits$alt_trans <- ifelse(circuits$alt < 0, 1, circuits$alt + 1)
circuits$alt_trans <- log(circuits$alt_trans)
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = circuits,
lng = circuits$lng,
lat = circuits$lat,
radius = circuits$alt_trans
)
circuits$alt_trans <- log(circuits$alt_trans) + 10
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = circuits,
lng = circuits$lng,
lat = circuits$lat,
radius = circuits$alt_trans
)
circuits$alt_trans <- log(circuits$alt_trans) + 2
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = circuits,
lng = circuits$lng,
lat = circuits$lat,
radius = circuits$alt_trans
)
circuits$alt_trans <- log(circuits$alt_trans)
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = circuits,
lng = circuits$lng,
lat = circuits$lat,
radius = circuits$alt_trans
)
# Lectura de los datos necesarios
circuits <- read.csv('./datos/circuits.csv')
# Eliminamos los valores negativos para poder tomar logaritmo
circuits$alt_trans <- ifelse(circuits$alt < 0, 1, circuits$alt + 1)
circuits$alt_trans <- log(circuits$alt_trans)
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = circuits,
lng = circuits$lng,
lat = circuits$lat,
radius = circuits$alt_trans
)
# Lectura de los datos necesarios
circuits <- read.csv('./datos/circuits.csv')
# Eliminamos los valores negativos para poder tomar logaritmo
circuits$alt_trans <- ifelse(circuits$alt < 0, 1, circuits$alt + 1)
circuits$alt_trans <- log(circuits$alt_trans) + 2
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = circuits,
lng = circuits$lng,
lat = circuits$lat,
radius = circuits$alt_trans
)
circuits$alt_trans <- log(circuits$alt_trans) * 10
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = circuits,
lng = circuits$lng,
lat = circuits$lat,
radius = circuits$alt_trans
)
circuits$alt_trans <- log(circuits$alt_trans) * 2
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = circuits,
lng = circuits$lng,
lat = circuits$lat,
radius = circuits$alt_trans
)
# Eliminamos los valores negativos para poder tomar logaritmo
circuits$alt_trans <- ifelse(circuits$alt < 0, 1, circuits$alt + 1)
circuits$alt_trans <- log(circuits$alt_trans) * 2
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = circuits,
lng = circuits$lng,
lat = circuits$lat,
radius = circuits$alt_trans
)
# Eliminamos los valores negativos para poder tomar logaritmo
circuits$alt_trans <- ifelse(circuits$alt < 0, 1, circuits$alt + 1)
circuits$alt_trans <- log(circuits$alt_trans) * 1.5
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = circuits,
lng = circuits$lng,
lat = circuits$lat,
radius = circuits$alt_trans
)
historico <- read.csv('./datos/puntosequipo.csv')
View(historico)
historico <- read.csv('./datos/points_per_year.csv')
View(historico)
library(leaflet)
# Crear el dataframe de ejemplo
datos <- data.frame(
equipo = c("A", "B", "C", "D", "E"),
latitud = c(19.4, 19.3, 19.2, 19.1, 19.0),
longitud = c(-99.2, -99.3, -99.4, -99.5, -99.6)
)
# Crear un vector de colores para cada valor categórico en la columna 'equipo'
colores <- c("red", "blue", "green", "yellow", "orange")
# Crear el objeto de factor de color con la función factor()
color_pal <- factor(datos$equipo, levels = unique(datos$equipo))
# Agregar los marcadores al mapa utilizando el objeto de factor de color y el vector de colores
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(
lng = datos$longitud,
lat = datos$latitud,
radius = 5,
color = colores[color_pal],
stroke = FALSE,
fillOpacity = 0.8
)
map
color_pal
unique(datos$equipo)
historico <- read.csv('./datos/points_per_year.csv')
View(historico)
unique(historico$team)
# Creamos los objetos auxiliares necesarios
colores <- c("#C92D4B", "#5E8FAA", "#2293D1", "#358C75", "#F91536", "#B6BABD", "#F58020", "#6CD3BF", "#3671C6", "#37BEDD")
color_pal <- factor(historico$team, levels = unique(historico$team))
# Ahora hacemos el filtrado y coloreamos el mapa como debe de ser
anio_inico <- 2020
anio_fin <- 2022
filter(historico, year >= anio_inico & year <= anio_fin)
# Definimos función para recibir años y regresar el dataframe para la gráfica
encontrar_mejor_equipo <- function(anio_inicio, anio_fin, n_top) {
# Filtramos los datos para el rango de años especificado
datos_filtrados <- filter(historico, year >= anio_inicio & year <= anio_fin)
# Agrupamos los datos por circuitId y team
# Calculamos suma total de points
datos_agrupados <- datos_filtrados %>%
group_by(circuitId, team) %>%
summarise(total_points = sum(points))
# Seleccionamos solo los renglones correspondientes con n_top
datos_top <- datos_agrupados %>%
group_by(circuitId) %>%
top_n(n_top, total_points)
return(datos_top)
}
encontrar_mejor_equipo(2020, 2022, 1)
View(encontrar_mejor_equipo(2020, 2022, 1))
encontrar_mejor_equipo(2020, 2022, 1) %>% merge(circuits, by = "circuitId")
# Definimos función para recibir años y regresar el dataframe para la gráfica
encontrar_mejor_equipo <- function(anio_inicio, anio_fin, n_top) {
# Filtramos los datos para el rango de años especificado
datos_filtrados <- filter(historico, year >= anio_inicio & year <= anio_fin)
# Agrupamos los datos por circuitId y team
# Calculamos suma total de points
datos_agrupados <- datos_filtrados %>%
group_by(circuitId, team) %>%
summarise(total_points = sum(points))
# Seleccionamos solo los renglones correspondientes con n_top
datos_top <- datos_agrupados %>%
group_by(circuitId) %>%
top_n(n_top, total_points)
# Juntamos los datos con los de circuitos para poderlos graficar
resultado <- datos_top %>%
merge(circuits, by = "circuitId")
return(resultado)
}
encontrar_mejor_equipo(2020, 2022, 1)
datos_filtrados <- encontrar_mejor_equipo(2020, 2022, 1)
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = datos_filtrados,
lng = datos_filtrados$lng,
lat = datos_filtrados$lat,
color = colores[color_pal],
stroke = FALSE,
fillOpacity = 0.8
)
source("~/.active-rstudio-document", echo=TRUE)
colores_equipo <- read.csv('datos/colores_equipos.csv')
View(datos_filtrados)
# Juntamos los datos con los de circuitos para poderlos graficar
resultado <- datos_top %>%
merge(circuits, by = "circuitId") %>%
merge(colores_equipo, by = "team")
# Definimos función para recibir años y regresar el dataframe para la gráfica
encontrar_mejor_equipo <- function(anio_inicio, anio_fin, n_top) {
# Filtramos los datos para el rango de años especificado
datos_filtrados <- filter(historico, year >= anio_inicio & year <= anio_fin)
# Agrupamos los datos por circuitId y team
# Calculamos suma total de points
datos_agrupados <- datos_filtrados %>%
group_by(circuitId, team) %>%
summarise(total_points = sum(points))
# Seleccionamos solo los renglones correspondientes con n_top
datos_top <- datos_agrupados %>%
group_by(circuitId) %>%
top_n(n_top, total_points)
# Juntamos los datos con los de circuitos para poderlos graficar
resultado <- datos_top %>%
merge(circuits, by = "circuitId") %>%
merge(colores_equipo, by = "team")
return(resultado)
}
datos_filtrados <- encontrar_mejor_equipo(2020, 2022, 1)
View(datos_filtrados)
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = datos_filtrados,
lng = datos_filtrados$lng,
lat = datos_filtrados$lat,
color = datos_filtrados$color,
stroke = FALSE,
fillOpacity = 0.8
)
datos_filtrados <- encontrar_mejor_equipo(2010, 2015, 1)
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = datos_filtrados,
lng = datos_filtrados$lng,
lat = datos_filtrados$lat,
color = datos_filtrados$color,
stroke = FALSE,
fillOpacity = 0.8
)
datos_filtrados <- encontrar_mejor_equipo(2010, 2020, 1)
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = datos_filtrados,
lng = datos_filtrados$lng,
lat = datos_filtrados$lat,
color = datos_filtrados$color,
stroke = FALSE,
fillOpacity = 0.8
)
View(datos_filtrados)
# Definimos función para recibir años y regresar el dataframe para la gráfica
encontrar_mejor_equipo <- function(anio_inicio, anio_fin, n_top) {
# Filtramos los datos para el rango de años especificado
datos_filtrados <- filter(historico, year >= anio_inicio & year <= anio_fin)
# Agrupamos los datos por circuitId y team
# Calculamos suma total de points
datos_agrupados <- datos_filtrados %>%
group_by(circuitId, team) %>%
summarise(total_points = sum(points))
# Seleccionamos solo los renglones correspondientes con n_top
datos_top <- datos_agrupados %>%
group_by(circuitId) %>%
top_n(n_top, total_points)
# Juntamos los datos con los de circuitos para poderlos graficar
resultado <- datos_top %>%
merge(circuits, by = "circuitId") %>%
merge(colores_equipo, by = "team")
resultado$size_aux <- log(resultado$total_points) * 1.5
return(resultado)
}
# Aquí es donde llamamos a la función filtrando por los años especificados
datos_filtrados <- encontrar_mejor_equipo(2010, 2020, 1)
View(datos_filtrados)
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = datos_filtrados,
lng = datos_filtrados$lng,
lat = datos_filtrados$lat,
radius = datos_filtrados$size_aux,
color = datos_filtrados$color,
stroke = FALSE,
fillOpacity = 0.8
)
# Definimos función para recibir años y regresar el dataframe para la gráfica
encontrar_mejor_equipo <- function(anio_inicio, anio_fin, n_top) {
# Filtramos los datos para el rango de años especificado
datos_filtrados <- filter(historico, year >= anio_inicio & year <= anio_fin)
# Agrupamos los datos por circuitId y team
# Calculamos suma total de points
datos_agrupados <- datos_filtrados %>%
group_by(circuitId, team) %>%
summarise(total_points = sum(points))
# Seleccionamos solo los renglones correspondientes con n_top
datos_top <- datos_agrupados %>%
group_by(circuitId) %>%
top_n(n_top, total_points)
# Juntamos los datos con los de circuitos para poderlos graficar
resultado <- datos_top %>%
merge(circuits, by = "circuitId") %>%
merge(colores_equipo, by = "team")
resultado$size_aux <- log(resultado$total_points) * 1.7
return(resultado)
}
# Aquí es donde llamamos a la función filtrando por los años especificados
datos_filtrados <- encontrar_mejor_equipo(2010, 2020, 1)
View(datos_filtrados)
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = datos_filtrados,
lng = datos_filtrados$lng,
lat = datos_filtrados$lat,
radius = datos_filtrados$size_aux,
color = datos_filtrados$color,
stroke = FALSE,
fillOpacity = 0.8
)
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = datos_filtrados,
lng = datos_filtrados$lng,
lat = datos_filtrados$lat,
radius = datos_filtrados$size_aux,
color = datos_filtrados$color,
stroke = FALSE,
fillOpacity = 0.8,
popup = paste0(
"<b>Circuito</b>: ", datos_filtrados$name, "<br>",
"<b>Equipo</b>: ", datos_filtrados$team, "<br>",
"<b>Puntos</b>: ", datos_filtrados$total_points
)
)
# Aquí es donde llamamos a la función filtrando por los años especificados
datos_filtrados <- encontrar_mejor_equipo(2020, 2020, 1)
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = datos_filtrados,
lng = datos_filtrados$lng,
lat = datos_filtrados$lat,
radius = datos_filtrados$size_aux,
color = datos_filtrados$color,
stroke = FALSE,
fillOpacity = 0.8,
popup = paste0(
"<b>Circuito</b>: ", datos_filtrados$name, "<br>",
"<b>Equipo</b>: ", datos_filtrados$team, "<br>",
"<b>Puntos</b>: ", datos_filtrados$total_points
)
)
# Aquí es donde llamamos a la función filtrando por los años especificados
datos_filtrados <- encontrar_mejor_equipo(2000, 2020, 1)
leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = datos_filtrados,
lng = datos_filtrados$lng,
lat = datos_filtrados$lat,
radius = datos_filtrados$size_aux,
color = datos_filtrados$color,
stroke = FALSE,
fillOpacity = 0.8,
popup = paste0(
"<b>Circuito</b>: ", datos_filtrados$name, "<br>",
"<b>Equipo</b>: ", datos_filtrados$team, "<br>",
"<b>Puntos</b>: ", datos_filtrados$total_points
)
)
gc()
gc()
